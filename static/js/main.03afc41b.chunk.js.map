{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/ErrorBoundary.js","Components/Scroll.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","id","email","uni","grad","className","src","alt","CardList","robots","CardsArray","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","ErrorBoundary","props","state","hasError","error","info","this","setState","hasErrro","children","Component","Scroll","style","overflowY","border","height","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","FilteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"wOAiBeA,EAdF,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,KAAKC,EAAuB,EAAvBA,GAAGC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,IAAa,EAATC,KAC9B,OACI,yBAAKC,UAAU,oDAEX,yBAAKC,IAAG,+BAA2BL,EAA3B,iBAA8CM,IAAI,WAE1D,6BACI,wBAAIF,UAAU,MAAML,GACpB,uBAAGK,UAAU,MAAMH,GACnB,uBAAGG,UAAU,gBAAgBF,MCO9BK,EAhBE,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAETC,EAAaD,EAAOE,KAAI,SAACC,EAAMC,GACjC,OAAO,kBAAE,EAAF,CAAOC,IAAKD,EACnBZ,GAAIQ,EAAOI,GAAGZ,GACdD,KAAMS,EAAOI,GAAGb,KAChBE,MAAOO,EAAOI,GAAGX,MACjBC,IAAKM,EAAOI,GAAGV,SAGrB,OACI,6BACKO,ICJIK,EATG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACA,yBAAKX,UAAW,OACZ,2BAAOA,UAAU,gCAAgCY,KAAK,SAASC,YAAY,gBAC3EC,SAAWH,MCeJI,E,kDAlBX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CACTC,UAAU,GAHA,E,8DAMCC,EAAOC,GACtBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAGxB,OAAGG,KAAKJ,MAAMM,SACf,iDAEMF,KAAKL,MAAMQ,a,GAdIC,aCObC,G,MAPA,SAACV,GACZ,OACI,yBAAKW,MAAO,CAACC,UAAW,SAAUC,OAAO,wBAAwBC,OAAO,UACnEd,EAAMQ,YCmDHO,E,kDA9CZ,aAAgB,IAAD,8BACX,gBAkBJC,eAAkB,SAAAC,GACd,EAAKX,SAAS,CAACY,YAAaD,EAAME,OAAOC,SAlBzC,EAAKnB,MAAQ,CACbb,OAAQ,GACR8B,YAAa,IAJF,E,gEAQC,IAAD,OACXG,MAAM,8CACDC,MAAK,SAAAC,GACF,OAAOA,EAASC,UAEnBF,MAAK,SAACG,GACH,EAAKnB,SAAS,CAAClB,OAAQqC,S,+BASzB,IAAD,EACyBpB,KAAKJ,MAA5Bb,EADF,EACEA,OAAQ8B,EADV,EACUA,YACTQ,EAAiBtC,EAAOuC,QAAO,SAACC,GAClC,OAAOA,EAAMjD,KAAKkD,cAAcC,SAASZ,EAAYW,kBAGzD,OAAiC,IAA7BxB,KAAKJ,MAAMb,OAAO2C,OACX,wBAAI/C,UAAU,MAAd,WAIP,yBAAKA,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAeU,KAAKW,iBAC/B,kBAAC,EAAD,KACA,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAU5B,OAASsC,W,GAxChBjB,aCGCuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACA,kBAAE,EAAF,OAEAC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAA5C,GACL6C,QAAQ7C,MAAMA,EAAM8C,a","file":"static/js/main.03afc41b.chunk.js","sourcesContent":["import React from \"react\";\r\n//import { robots } from \"../robots\";\r\n\r\nconst Card = ({name,id,email, uni,grad})=> {\r\n    return  (\r\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            \r\n            <img src= {`https://robohash.org/${id}?size=200x200`} alt=\"robots\" />\r\n            \r\n            <div>\r\n                <h2 className=\"tc\">{name}</h2>\r\n                <p className=\"tc\">{email}</p>\r\n                <p className=\"tc dark-blue\">{uni}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Card;\r\n\r\n//destructuring\r\n// const Card = ({name, email, id})=> {\r\n//     return  (\r\n//         <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n//             <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robots\"/>\r\n//             <div>\r\n//                 <h2 className=\"tc\">{name}</h2>\r\n//                 <p className=\"tc\">{email}</p>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// }","import React from \"react\";\r\nimport Card from \"../Components/Card.js\";\r\n\r\nconst CardList = ({robots})=>{\r\n    \r\n    const CardsArray = robots.map((user, i)=> { \r\n        return < Card key={i} \r\n        id={robots[i].id} \r\n        name={robots[i].name} \r\n        email={robots[i].email}\r\n        uni={robots[i].uni}\r\n        />\r\n    });\r\n  return (\r\n      <div>\r\n          {CardsArray}\r\n      </div>\r\n  )\r\n}\r\nexport default CardList;\r\n\r\n \r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n    <div className= \"pa2\">\r\n        <input className=\"pa3 b--green bg-lightest-blue\" type=\"search\" placeholder=\"search robots\" \r\n        onChange= {searchChange}/>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React, {Component} from \"react\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n    componentDidCatch (error, info){\r\n        this.setState({hasError:true})\r\n    }\r\n    render(){\r\n        if(this.state.hasErrro){\r\nreturn <h1>ooops!!!! Errorrr</h1>\r\n        }\r\n      return this.props.children;\r\n    } \r\n    \r\n}\r\n\r\nexport default ErrorBoundary;","import React from \"react\";\r\n \r\nconst Scroll = (props)=> {\r\n    return (\r\n        <div style={{overflowY: \"scroll\", border:\"5px solid light-green\",height:\"500px\"}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\nexport default Scroll;","import React, {Component} from \"react\";\r\nimport CardList from \"../Components/CardList.js\";\r\n//import { robots } from \"./robots\";\r\nimport SearchBox from \"../Components/SearchBox.js\";\r\nimport ErrorBoundary from \"../Components/ErrorBoundary\";\r\nimport \"./App.css\"; \r\nimport Scroll from \"../Components/Scroll.js\"\r\n//import { robots } from \"./robots\";\r\n\r\nclass App  extends Component {\r\n    constructor () {\r\n        super()\r\n        this.state = {\r\n        robots: [],\r\n        searchfield: \"\",\r\n        }\r\n    }\r\n\r\ncomponentDidMount(){\r\n        fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n            .then(response => { \r\n                return response.json();\r\n            })\r\n            .then((users) => {\r\n                this.setState({robots: users\r\n                });\r\n             });\r\n    }\r\n\r\n    onSearchChange = (event => {\r\n        this.setState({searchfield: event.target.value});\r\n    });\r\n\r\n    render (){\r\n        const {robots, searchfield} = this.state;\r\n        const FilteredRobots = robots.filter((robot) => {\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase())\r\n            });\r\n\r\n        if (this.state.robots.length === 0){\r\n            return <h1 className=\"tc\">Loading</h1>  \r\n        } \r\n            else {\r\n        return (\r\n            <div className=\"tc\">\r\n                <h1 className=\"f1\">RoboFriends</h1>\r\n                <SearchBox searchChange= {this.onSearchChange} />\r\n                <Scroll>\r\n                <ErrorBoundary>\r\n                <CardList robots= {FilteredRobots}/>\r\n                </ErrorBoundary>\r\n                </Scroll>\r\n            </div>\r\n                );} \r\n    }\r\n }\r\n export default App;\r\n\r\n //state is simply an object, description of your apps object that describes your a ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport \"tachyons\";\nimport App from \"./Containers/App.js\";\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n  < App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}